// Class definition of Factory Method - ConcreteProduct participant (classification)

/**
 * @file CommercialBuilding.h
 * @brief Declaration of the CommercialBuilding class.
 */

#ifndef COMMERCIALBUILDING_H
#define COMMERCIALBUILDING_H

#include "Building.h"
class TaxManager;
#include <iostream>

/**
 * @class CommercialBuilding
 * @brief Abstract class representing commercial buildings.
 *
 * Provides shared attributes and operations for all commercial buildings,
 * such as available jobs, kid spaces, and beds. Subtypes handle specific implementations.
 */
class CommercialBuilding : public Building
{

protected:
    int availableJobs;       ///< Number of available jobs (for shops and offices).
    int availableKidsSpaces; ///< Number of available spaces for children (for schools).
    int availableBeds;       ///< Number of available beds (for hospitals).
    bool closed;             ///< Indicates if the building is closed due to recession.
    double annualRevenue;    ///< Annual revenue generated by the building.

public:
    /**
     * @brief Default constructor for CommercialBuilding.
     *
     * Initializes default values for resources and closed state.
     */
    CommercialBuilding();

    /**
     * @brief Displays the statistics specific to the commercial building.
     *
     * Outputs information such as available jobs, spaces, beds, and revenue.
     */
    void displayStats() const;

    /**
     * @brief Gets the number of available jobs in the building.
     *
     * @return int The current number of available jobs.
     */
    int getAvailableJobs() const;

    /**
     * @brief Sets the number of available jobs in the building.
     *
     * @param jobs The number of jobs to set.
     */
    void setAvailableJobs(int jobs);

    /**
     * @brief Gets the number of available spaces for children.
     *
     * @return int The current number of available kids spaces.
     */
    int getAvailableKidsSpaces() const;

    /**
     * @brief Sets the number of available spaces for children.
     *
     * @param kidsSpaces The number of kid spaces to set.
     */
    void setAvailableKidsSpaces(int kidsSpaces);

    /**
     * @brief Gets the number of available beds in the building.
     *
     * @return int The current number of available beds.
     */
    int getAvailableBeds() const;

    /**
     * @brief Sets the number of available beds in the building.
     *
     * @param beds The number of beds to set.
     */
    void setAvailableBeds(int beds);

    /**
     * @brief Checks the availability of resources specific to the subtype.
     *
     * This is a pure virtual function that must be implemented in derived classes.
     * @return true if resources are available, false otherwise.
     */
    virtual bool checkAvailability() const = 0;

    /**
     * @brief Accepts a visitor for the visitor pattern.
     *
     * Allows a `TaxManager` object to perform operations on this building.
     * @param visitor Pointer to a TaxManager object.
     */
    virtual void accept(TaxManager *visitor) = 0;

    /**
     * @brief Closes the building due to recession or other factors.
     *
     * Sets the `closed` flag and adjusts internal resources as necessary.
     */
    void closeBuilding();

    /**
     * @brief Reopens the building, restoring resources to maximum capacity.
     *
     * Resets the `closed` flag and makes the building operational again.
     */
    void reopenBuilding();

    /**
     * @brief Checks if the building is currently closed.
     *
     * @return true if the building is closed, otherwise false.
     */
    bool isClosed() const;

    /**
     * @brief Clones the commercial building for repairs or duplications.
     *
     * This is a pure virtual method, intended to be implemented in derived classes.
     * @return Building* A new cloned building object.
     */
    virtual Building *repairClone() const = 0;

    /**
     * @brief Gets the annual revenue of the building.
     *
     * @return double The annual revenue.
     */
    double getAnnualRevenue() const;

    /**
     * @brief Sets the annual revenue of the building.
     *
     * @param revenue The revenue amount to set.
     */
    void setAnnualRevenue(double revenue);

    /**
     * @brief Calculates the tax for the building based on its revenue.
     *
     * @return double The calculated tax amount.
     */
    double calculateTax() const override;
};

#endif // COMMERCIALBUILDING_H
